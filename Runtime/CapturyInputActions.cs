//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Toolkit/CapturyInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CapturyInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CapturyInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CapturyInputActions"",
    ""maps"": [
        {
            ""name"": ""Torso"",
            ""id"": ""0c00d7e9-bc68-4920-b862-0ce06651a6e1"",
            ""actions"": [
                {
                    ""name"": ""IsBentOver"",
                    ""type"": ""Button"",
                    ""id"": ""90aad123-e17d-4909-b1e1-458015566dad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""IsUpright"",
                    ""type"": ""Button"",
                    ""id"": ""496b40cf-aa97-4d08-98f1-199ae3509247"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WeightShiftLeft"",
                    ""type"": ""Button"",
                    ""id"": ""29650d52-0a9b-4d1b-85a1-243f98cdfdff"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WeightShiftRight"",
                    ""type"": ""Button"",
                    ""id"": ""6fd1238a-761c-4ead-a9fb-a09dbf4dd950"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WeightShiftX"",
                    ""type"": ""Value"",
                    ""id"": ""f571e362-cd3f-4a5f-b0ea-a6c841f512e8"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PelvisPosition"",
                    ""type"": ""Value"",
                    ""id"": ""473008d5-19a6-4df5-a68b-f23042dd0a0c"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5eba5798-bd5d-4b85-be28-340bec9b5217"",
                    ""path"": ""<CapturyInput>/isBentOver"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""IsBentOver"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""61228164-cc34-4801-8523-784c041633c0"",
                    ""path"": ""<CapturyInput>/isUpright"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""IsUpright"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""57c98c13-c121-422e-a5e1-4a1e33125662"",
                    ""path"": ""<CapturyInput>/weightShiftLeft"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WeightShiftLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""418bd9e9-c694-43ef-9412-85a2889eb784"",
                    ""path"": ""<CapturyInput>/weightShiftRight"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WeightShiftRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eca0ef71-ce63-4593-bebe-755ba3f4c868"",
                    ""path"": ""<CapturyInput>/weightShiftX"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WeightShiftX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4c33dd01-15d9-405f-a0d4-fd3af7d20717"",
                    ""path"": ""<CapturyInput>/pelvisPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PelvisPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Foot"",
            ""id"": ""17b8f3ab-ad73-4693-bd67-158d6a4f6f7a"",
            ""actions"": [
                {
                    ""name"": ""FootRaised"",
                    ""type"": ""Button"",
                    ""id"": ""e2467974-5fde-4ce6-9974-2ea33e434d3f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FootLowered"",
                    ""type"": ""Button"",
                    ""id"": ""2f4cc560-e253-45f4-ba75-afdd0db56a73"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftFootPosition"",
                    ""type"": ""Value"",
                    ""id"": ""7eb0700d-d6bf-4d25-9f9a-e2a2e2bd902d"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightFootPosition"",
                    ""type"": ""Value"",
                    ""id"": ""91b64973-520a-4cef-a4bf-40479316da1f"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftHipAbducted"",
                    ""type"": ""Button"",
                    ""id"": ""d173a27f-4f9f-450d-85ca-a6851ed1f5a9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightHipAbducted"",
                    ""type"": ""Button"",
                    ""id"": ""36194fec-8af5-48d5-8477-80366e90fffc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""IsWalking"",
                    ""type"": ""Button"",
                    ""id"": ""3dc33613-12db-4c44-b2fc-7e2412c353d1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WalkStarted"",
                    ""type"": ""Button"",
                    ""id"": ""037cff03-951e-4d28-b86e-bb5fc841d77f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WalkStopped"",
                    ""type"": ""Button"",
                    ""id"": ""0282ed27-c67e-4109-925b-dde46dc79f53"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WalkSpeed"",
                    ""type"": ""Value"",
                    ""id"": ""cc8f6044-bdd8-4746-ac7f-96ea5d64fe4a"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Cadence"",
                    ""type"": ""Value"",
                    ""id"": ""40ea3953-29c3-4dec-b5fc-0ae3d7c70d07"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftStep"",
                    ""type"": ""Button"",
                    ""id"": ""1e4e4555-1059-4f0c-a864-19835545ab7b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightStep"",
                    ""type"": ""Button"",
                    ""id"": ""53bb61ff-b0bb-455a-bb74-5eec696d0d6d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftStepTime"",
                    ""type"": ""Value"",
                    ""id"": ""25e11c9c-84d1-4e63-aa44-053a49dcb3b1"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightStepTime"",
                    ""type"": ""Value"",
                    ""id"": ""f2d8346a-634b-4927-a262-e7ace8068317"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""StepTimeAsymmetry"",
                    ""type"": ""Value"",
                    ""id"": ""1d257fdd-0f63-4837-9266-90950df6564c"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GaitConsistency"",
                    ""type"": ""Value"",
                    ""id"": ""c00010c3-7015-4c80-b4de-3e0d43b2769c"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""14524b41-bec8-4e1d-b4e2-7c0b44ed028c"",
                    ""path"": ""<CapturyInput>/footRaised"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FootRaised"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a438294f-f0db-44d3-91a6-deaaba045f4d"",
                    ""path"": ""<CapturyInput>/footLowered"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FootLowered"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1b0b860a-cb52-4295-bfba-4f11aad83157"",
                    ""path"": ""<CapturyInput>/leftFootPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftFootPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""96991a95-0faf-4224-a7db-bfb779511212"",
                    ""path"": ""<CapturyInput>/rightFootPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightFootPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""74bf5201-afd4-4b9f-9c6d-8346a33fd2ff"",
                    ""path"": ""<CapturyInput>/leftHipAbducted"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftHipAbducted"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2e2952ad-cc47-4408-8365-df436c8014d0"",
                    ""path"": ""<CapturyInput>/rightHipAbducted"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightHipAbducted"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7724b1a4-6e3f-4e41-bc9a-1b8e353d803a"",
                    ""path"": ""<CapturyInput>/isWalking"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""IsWalking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""28ffd3df-27f6-4deb-8ed1-ac7c256e364b"",
                    ""path"": ""<CapturyInput>/walkStarted"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WalkStarted"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9d7be884-fed9-4f1f-8a07-60359c8ba1cd"",
                    ""path"": ""<CapturyInput>/walkStopped"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WalkStopped"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e6e17f70-71c8-4afd-8009-4651a56a683b"",
                    ""path"": ""<CapturyInput>/walkSpeed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WalkSpeed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""84f22aff-98dc-40c3-b213-795eb8b1715e"",
                    ""path"": ""<CapturyInput>/cadence"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cadence"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""30b31751-349e-4490-b130-a34af9ae2e79"",
                    ""path"": ""<CapturyInput>/leftStep"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftStep"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7bba6e5d-e0bf-4570-930b-9ba1b7fb587e"",
                    ""path"": ""<CapturyInput>/rightStep"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightStep"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3e14a338-747d-4854-a40c-3ec0c216086d"",
                    ""path"": ""<CapturyInput>/leftStepTime"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftStepTime"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8a60c09f-7ea6-46ea-b789-75c2a4f4cc1c"",
                    ""path"": ""<CapturyInput>/rightStepTime"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightStepTime"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""be00868a-76c6-4443-932b-ad044cd03ab7"",
                    ""path"": ""<CapturyInput>/stepTimeAsymmetry"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StepTimeAsymmetry"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0e93f71f-0fbd-4f1b-97f7-bce531808ae8"",
                    ""path"": ""<CapturyInput>/gaitConsistency"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GaitConsistency"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Arms"",
            ""id"": ""e985bc4b-eeb7-4330-9921-bea9272f5053"",
            ""actions"": [
                {
                    ""name"": ""LeftHandPosition"",
                    ""type"": ""Value"",
                    ""id"": ""2868959d-b65d-42db-8693-a9f84d7b2640"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightHandPosition"",
                    ""type"": ""Value"",
                    ""id"": ""4d80b29a-84bb-4865-91b5-ffc5bbd65295"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftHandRaised"",
                    ""type"": ""Button"",
                    ""id"": ""dd376aba-849f-4381-a792-348231692d97"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightHandRaised"",
                    ""type"": ""Button"",
                    ""id"": ""e73dd91d-1f2c-4a7e-af42-891b482b3c54"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e7c0aaec-b963-4ccb-8764-3f0630d471b1"",
                    ""path"": ""<CapturyInput>/leftHandPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftHandPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c9e3eb64-91ac-45d7-b82e-4d0e5d28a6cd"",
                    ""path"": ""<CapturyInput>/rightHandPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightHandPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""290a80cf-2c04-4a4d-91f6-fb0701248134"",
                    ""path"": ""<CapturyInput>/leftHandRaised"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftHandRaised"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""18baaf45-6daf-4668-9217-0a1203b73388"",
                    ""path"": ""<CapturyInput>/rightHandRaised"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightHandRaised"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Head"",
            ""id"": ""3b14f3b7-bbcf-4a92-81f9-ee19037b896b"",
            ""actions"": [
                {
                    ""name"": ""HeadPosition"",
                    ""type"": ""Value"",
                    ""id"": ""13fd6c73-a50e-4e0a-96a0-e322d6b3ef72"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""HeadRotation"",
                    ""type"": ""Value"",
                    ""id"": ""a83cde25-fb80-4e98-8e01-929c7bf32d5d"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""HeadNodding"",
                    ""type"": ""Button"",
                    ""id"": ""b4d11b69-0a39-45fd-89c6-a1454cc9da33"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HeadShaking"",
                    ""type"": ""Button"",
                    ""id"": ""d000bedf-2907-4e01-8ea2-222d1920e2d4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4beeb117-73cf-40db-84df-5d00572c18b2"",
                    ""path"": ""<CapturyInput>/headPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HeadPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bcb48c3b-2081-4f73-9b90-51bea5ada99d"",
                    ""path"": ""<CapturyInput>/headRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HeadRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e014749-3275-4d2b-b095-3172aec50df1"",
                    ""path"": ""<CapturyInput>/headNodding"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HeadNodding"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5dd73b9d-ead9-4695-a112-2cde0b9ee30f"",
                    ""path"": ""<CapturyInput>/headShaking"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HeadShaking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Torso
        m_Torso = asset.FindActionMap("Torso", throwIfNotFound: true);
        m_Torso_IsBentOver = m_Torso.FindAction("IsBentOver", throwIfNotFound: true);
        m_Torso_IsUpright = m_Torso.FindAction("IsUpright", throwIfNotFound: true);
        m_Torso_WeightShiftLeft = m_Torso.FindAction("WeightShiftLeft", throwIfNotFound: true);
        m_Torso_WeightShiftRight = m_Torso.FindAction("WeightShiftRight", throwIfNotFound: true);
        m_Torso_WeightShiftX = m_Torso.FindAction("WeightShiftX", throwIfNotFound: true);
        m_Torso_PelvisPosition = m_Torso.FindAction("PelvisPosition", throwIfNotFound: true);
        // Foot
        m_Foot = asset.FindActionMap("Foot", throwIfNotFound: true);
        m_Foot_FootRaised = m_Foot.FindAction("FootRaised", throwIfNotFound: true);
        m_Foot_FootLowered = m_Foot.FindAction("FootLowered", throwIfNotFound: true);
        m_Foot_LeftFootPosition = m_Foot.FindAction("LeftFootPosition", throwIfNotFound: true);
        m_Foot_RightFootPosition = m_Foot.FindAction("RightFootPosition", throwIfNotFound: true);
        m_Foot_LeftHipAbducted = m_Foot.FindAction("LeftHipAbducted", throwIfNotFound: true);
        m_Foot_RightHipAbducted = m_Foot.FindAction("RightHipAbducted", throwIfNotFound: true);
        m_Foot_IsWalking = m_Foot.FindAction("IsWalking", throwIfNotFound: true);
        m_Foot_WalkStarted = m_Foot.FindAction("WalkStarted", throwIfNotFound: true);
        m_Foot_WalkStopped = m_Foot.FindAction("WalkStopped", throwIfNotFound: true);
        m_Foot_WalkSpeed = m_Foot.FindAction("WalkSpeed", throwIfNotFound: true);
        m_Foot_Cadence = m_Foot.FindAction("Cadence", throwIfNotFound: true);
        m_Foot_LeftStep = m_Foot.FindAction("LeftStep", throwIfNotFound: true);
        m_Foot_RightStep = m_Foot.FindAction("RightStep", throwIfNotFound: true);
        m_Foot_LeftStepTime = m_Foot.FindAction("LeftStepTime", throwIfNotFound: true);
        m_Foot_RightStepTime = m_Foot.FindAction("RightStepTime", throwIfNotFound: true);
        m_Foot_StepTimeAsymmetry = m_Foot.FindAction("StepTimeAsymmetry", throwIfNotFound: true);
        m_Foot_GaitConsistency = m_Foot.FindAction("GaitConsistency", throwIfNotFound: true);
        // Arms
        m_Arms = asset.FindActionMap("Arms", throwIfNotFound: true);
        m_Arms_LeftHandPosition = m_Arms.FindAction("LeftHandPosition", throwIfNotFound: true);
        m_Arms_RightHandPosition = m_Arms.FindAction("RightHandPosition", throwIfNotFound: true);
        m_Arms_LeftHandRaised = m_Arms.FindAction("LeftHandRaised", throwIfNotFound: true);
        m_Arms_RightHandRaised = m_Arms.FindAction("RightHandRaised", throwIfNotFound: true);
        // Head
        m_Head = asset.FindActionMap("Head", throwIfNotFound: true);
        m_Head_HeadPosition = m_Head.FindAction("HeadPosition", throwIfNotFound: true);
        m_Head_HeadRotation = m_Head.FindAction("HeadRotation", throwIfNotFound: true);
        m_Head_HeadNodding = m_Head.FindAction("HeadNodding", throwIfNotFound: true);
        m_Head_HeadShaking = m_Head.FindAction("HeadShaking", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Torso
    private readonly InputActionMap m_Torso;
    private List<ITorsoActions> m_TorsoActionsCallbackInterfaces = new List<ITorsoActions>();
    private readonly InputAction m_Torso_IsBentOver;
    private readonly InputAction m_Torso_IsUpright;
    private readonly InputAction m_Torso_WeightShiftLeft;
    private readonly InputAction m_Torso_WeightShiftRight;
    private readonly InputAction m_Torso_WeightShiftX;
    private readonly InputAction m_Torso_PelvisPosition;
    public struct TorsoActions
    {
        private @CapturyInputActions m_Wrapper;
        public TorsoActions(@CapturyInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @IsBentOver => m_Wrapper.m_Torso_IsBentOver;
        public InputAction @IsUpright => m_Wrapper.m_Torso_IsUpright;
        public InputAction @WeightShiftLeft => m_Wrapper.m_Torso_WeightShiftLeft;
        public InputAction @WeightShiftRight => m_Wrapper.m_Torso_WeightShiftRight;
        public InputAction @WeightShiftX => m_Wrapper.m_Torso_WeightShiftX;
        public InputAction @PelvisPosition => m_Wrapper.m_Torso_PelvisPosition;
        public InputActionMap Get() { return m_Wrapper.m_Torso; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TorsoActions set) { return set.Get(); }
        public void AddCallbacks(ITorsoActions instance)
        {
            if (instance == null || m_Wrapper.m_TorsoActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TorsoActionsCallbackInterfaces.Add(instance);
            @IsBentOver.started += instance.OnIsBentOver;
            @IsBentOver.performed += instance.OnIsBentOver;
            @IsBentOver.canceled += instance.OnIsBentOver;
            @IsUpright.started += instance.OnIsUpright;
            @IsUpright.performed += instance.OnIsUpright;
            @IsUpright.canceled += instance.OnIsUpright;
            @WeightShiftLeft.started += instance.OnWeightShiftLeft;
            @WeightShiftLeft.performed += instance.OnWeightShiftLeft;
            @WeightShiftLeft.canceled += instance.OnWeightShiftLeft;
            @WeightShiftRight.started += instance.OnWeightShiftRight;
            @WeightShiftRight.performed += instance.OnWeightShiftRight;
            @WeightShiftRight.canceled += instance.OnWeightShiftRight;
            @WeightShiftX.started += instance.OnWeightShiftX;
            @WeightShiftX.performed += instance.OnWeightShiftX;
            @WeightShiftX.canceled += instance.OnWeightShiftX;
            @PelvisPosition.started += instance.OnPelvisPosition;
            @PelvisPosition.performed += instance.OnPelvisPosition;
            @PelvisPosition.canceled += instance.OnPelvisPosition;
        }

        private void UnregisterCallbacks(ITorsoActions instance)
        {
            @IsBentOver.started -= instance.OnIsBentOver;
            @IsBentOver.performed -= instance.OnIsBentOver;
            @IsBentOver.canceled -= instance.OnIsBentOver;
            @IsUpright.started -= instance.OnIsUpright;
            @IsUpright.performed -= instance.OnIsUpright;
            @IsUpright.canceled -= instance.OnIsUpright;
            @WeightShiftLeft.started -= instance.OnWeightShiftLeft;
            @WeightShiftLeft.performed -= instance.OnWeightShiftLeft;
            @WeightShiftLeft.canceled -= instance.OnWeightShiftLeft;
            @WeightShiftRight.started -= instance.OnWeightShiftRight;
            @WeightShiftRight.performed -= instance.OnWeightShiftRight;
            @WeightShiftRight.canceled -= instance.OnWeightShiftRight;
            @WeightShiftX.started -= instance.OnWeightShiftX;
            @WeightShiftX.performed -= instance.OnWeightShiftX;
            @WeightShiftX.canceled -= instance.OnWeightShiftX;
            @PelvisPosition.started -= instance.OnPelvisPosition;
            @PelvisPosition.performed -= instance.OnPelvisPosition;
            @PelvisPosition.canceled -= instance.OnPelvisPosition;
        }

        public void RemoveCallbacks(ITorsoActions instance)
        {
            if (m_Wrapper.m_TorsoActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITorsoActions instance)
        {
            foreach (var item in m_Wrapper.m_TorsoActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TorsoActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TorsoActions @Torso => new TorsoActions(this);

    // Foot
    private readonly InputActionMap m_Foot;
    private List<IFootActions> m_FootActionsCallbackInterfaces = new List<IFootActions>();
    private readonly InputAction m_Foot_FootRaised;
    private readonly InputAction m_Foot_FootLowered;
    private readonly InputAction m_Foot_LeftFootPosition;
    private readonly InputAction m_Foot_RightFootPosition;
    private readonly InputAction m_Foot_LeftHipAbducted;
    private readonly InputAction m_Foot_RightHipAbducted;
    private readonly InputAction m_Foot_IsWalking;
    private readonly InputAction m_Foot_WalkStarted;
    private readonly InputAction m_Foot_WalkStopped;
    private readonly InputAction m_Foot_WalkSpeed;
    private readonly InputAction m_Foot_Cadence;
    private readonly InputAction m_Foot_LeftStep;
    private readonly InputAction m_Foot_RightStep;
    private readonly InputAction m_Foot_LeftStepTime;
    private readonly InputAction m_Foot_RightStepTime;
    private readonly InputAction m_Foot_StepTimeAsymmetry;
    private readonly InputAction m_Foot_GaitConsistency;
    public struct FootActions
    {
        private @CapturyInputActions m_Wrapper;
        public FootActions(@CapturyInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @FootRaised => m_Wrapper.m_Foot_FootRaised;
        public InputAction @FootLowered => m_Wrapper.m_Foot_FootLowered;
        public InputAction @LeftFootPosition => m_Wrapper.m_Foot_LeftFootPosition;
        public InputAction @RightFootPosition => m_Wrapper.m_Foot_RightFootPosition;
        public InputAction @LeftHipAbducted => m_Wrapper.m_Foot_LeftHipAbducted;
        public InputAction @RightHipAbducted => m_Wrapper.m_Foot_RightHipAbducted;
        public InputAction @IsWalking => m_Wrapper.m_Foot_IsWalking;
        public InputAction @WalkStarted => m_Wrapper.m_Foot_WalkStarted;
        public InputAction @WalkStopped => m_Wrapper.m_Foot_WalkStopped;
        public InputAction @WalkSpeed => m_Wrapper.m_Foot_WalkSpeed;
        public InputAction @Cadence => m_Wrapper.m_Foot_Cadence;
        public InputAction @LeftStep => m_Wrapper.m_Foot_LeftStep;
        public InputAction @RightStep => m_Wrapper.m_Foot_RightStep;
        public InputAction @LeftStepTime => m_Wrapper.m_Foot_LeftStepTime;
        public InputAction @RightStepTime => m_Wrapper.m_Foot_RightStepTime;
        public InputAction @StepTimeAsymmetry => m_Wrapper.m_Foot_StepTimeAsymmetry;
        public InputAction @GaitConsistency => m_Wrapper.m_Foot_GaitConsistency;
        public InputActionMap Get() { return m_Wrapper.m_Foot; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FootActions set) { return set.Get(); }
        public void AddCallbacks(IFootActions instance)
        {
            if (instance == null || m_Wrapper.m_FootActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FootActionsCallbackInterfaces.Add(instance);
            @FootRaised.started += instance.OnFootRaised;
            @FootRaised.performed += instance.OnFootRaised;
            @FootRaised.canceled += instance.OnFootRaised;
            @FootLowered.started += instance.OnFootLowered;
            @FootLowered.performed += instance.OnFootLowered;
            @FootLowered.canceled += instance.OnFootLowered;
            @LeftFootPosition.started += instance.OnLeftFootPosition;
            @LeftFootPosition.performed += instance.OnLeftFootPosition;
            @LeftFootPosition.canceled += instance.OnLeftFootPosition;
            @RightFootPosition.started += instance.OnRightFootPosition;
            @RightFootPosition.performed += instance.OnRightFootPosition;
            @RightFootPosition.canceled += instance.OnRightFootPosition;
            @LeftHipAbducted.started += instance.OnLeftHipAbducted;
            @LeftHipAbducted.performed += instance.OnLeftHipAbducted;
            @LeftHipAbducted.canceled += instance.OnLeftHipAbducted;
            @RightHipAbducted.started += instance.OnRightHipAbducted;
            @RightHipAbducted.performed += instance.OnRightHipAbducted;
            @RightHipAbducted.canceled += instance.OnRightHipAbducted;
            @IsWalking.started += instance.OnIsWalking;
            @IsWalking.performed += instance.OnIsWalking;
            @IsWalking.canceled += instance.OnIsWalking;
            @WalkStarted.started += instance.OnWalkStarted;
            @WalkStarted.performed += instance.OnWalkStarted;
            @WalkStarted.canceled += instance.OnWalkStarted;
            @WalkStopped.started += instance.OnWalkStopped;
            @WalkStopped.performed += instance.OnWalkStopped;
            @WalkStopped.canceled += instance.OnWalkStopped;
            @WalkSpeed.started += instance.OnWalkSpeed;
            @WalkSpeed.performed += instance.OnWalkSpeed;
            @WalkSpeed.canceled += instance.OnWalkSpeed;
            @Cadence.started += instance.OnCadence;
            @Cadence.performed += instance.OnCadence;
            @Cadence.canceled += instance.OnCadence;
            @LeftStep.started += instance.OnLeftStep;
            @LeftStep.performed += instance.OnLeftStep;
            @LeftStep.canceled += instance.OnLeftStep;
            @RightStep.started += instance.OnRightStep;
            @RightStep.performed += instance.OnRightStep;
            @RightStep.canceled += instance.OnRightStep;
            @LeftStepTime.started += instance.OnLeftStepTime;
            @LeftStepTime.performed += instance.OnLeftStepTime;
            @LeftStepTime.canceled += instance.OnLeftStepTime;
            @RightStepTime.started += instance.OnRightStepTime;
            @RightStepTime.performed += instance.OnRightStepTime;
            @RightStepTime.canceled += instance.OnRightStepTime;
            @StepTimeAsymmetry.started += instance.OnStepTimeAsymmetry;
            @StepTimeAsymmetry.performed += instance.OnStepTimeAsymmetry;
            @StepTimeAsymmetry.canceled += instance.OnStepTimeAsymmetry;
            @GaitConsistency.started += instance.OnGaitConsistency;
            @GaitConsistency.performed += instance.OnGaitConsistency;
            @GaitConsistency.canceled += instance.OnGaitConsistency;
        }

        private void UnregisterCallbacks(IFootActions instance)
        {
            @FootRaised.started -= instance.OnFootRaised;
            @FootRaised.performed -= instance.OnFootRaised;
            @FootRaised.canceled -= instance.OnFootRaised;
            @FootLowered.started -= instance.OnFootLowered;
            @FootLowered.performed -= instance.OnFootLowered;
            @FootLowered.canceled -= instance.OnFootLowered;
            @LeftFootPosition.started -= instance.OnLeftFootPosition;
            @LeftFootPosition.performed -= instance.OnLeftFootPosition;
            @LeftFootPosition.canceled -= instance.OnLeftFootPosition;
            @RightFootPosition.started -= instance.OnRightFootPosition;
            @RightFootPosition.performed -= instance.OnRightFootPosition;
            @RightFootPosition.canceled -= instance.OnRightFootPosition;
            @LeftHipAbducted.started -= instance.OnLeftHipAbducted;
            @LeftHipAbducted.performed -= instance.OnLeftHipAbducted;
            @LeftHipAbducted.canceled -= instance.OnLeftHipAbducted;
            @RightHipAbducted.started -= instance.OnRightHipAbducted;
            @RightHipAbducted.performed -= instance.OnRightHipAbducted;
            @RightHipAbducted.canceled -= instance.OnRightHipAbducted;
            @IsWalking.started -= instance.OnIsWalking;
            @IsWalking.performed -= instance.OnIsWalking;
            @IsWalking.canceled -= instance.OnIsWalking;
            @WalkStarted.started -= instance.OnWalkStarted;
            @WalkStarted.performed -= instance.OnWalkStarted;
            @WalkStarted.canceled -= instance.OnWalkStarted;
            @WalkStopped.started -= instance.OnWalkStopped;
            @WalkStopped.performed -= instance.OnWalkStopped;
            @WalkStopped.canceled -= instance.OnWalkStopped;
            @WalkSpeed.started -= instance.OnWalkSpeed;
            @WalkSpeed.performed -= instance.OnWalkSpeed;
            @WalkSpeed.canceled -= instance.OnWalkSpeed;
            @Cadence.started -= instance.OnCadence;
            @Cadence.performed -= instance.OnCadence;
            @Cadence.canceled -= instance.OnCadence;
            @LeftStep.started -= instance.OnLeftStep;
            @LeftStep.performed -= instance.OnLeftStep;
            @LeftStep.canceled -= instance.OnLeftStep;
            @RightStep.started -= instance.OnRightStep;
            @RightStep.performed -= instance.OnRightStep;
            @RightStep.canceled -= instance.OnRightStep;
            @LeftStepTime.started -= instance.OnLeftStepTime;
            @LeftStepTime.performed -= instance.OnLeftStepTime;
            @LeftStepTime.canceled -= instance.OnLeftStepTime;
            @RightStepTime.started -= instance.OnRightStepTime;
            @RightStepTime.performed -= instance.OnRightStepTime;
            @RightStepTime.canceled -= instance.OnRightStepTime;
            @StepTimeAsymmetry.started -= instance.OnStepTimeAsymmetry;
            @StepTimeAsymmetry.performed -= instance.OnStepTimeAsymmetry;
            @StepTimeAsymmetry.canceled -= instance.OnStepTimeAsymmetry;
            @GaitConsistency.started -= instance.OnGaitConsistency;
            @GaitConsistency.performed -= instance.OnGaitConsistency;
            @GaitConsistency.canceled -= instance.OnGaitConsistency;
        }

        public void RemoveCallbacks(IFootActions instance)
        {
            if (m_Wrapper.m_FootActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFootActions instance)
        {
            foreach (var item in m_Wrapper.m_FootActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FootActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FootActions @Foot => new FootActions(this);

    // Arms
    private readonly InputActionMap m_Arms;
    private List<IArmsActions> m_ArmsActionsCallbackInterfaces = new List<IArmsActions>();
    private readonly InputAction m_Arms_LeftHandPosition;
    private readonly InputAction m_Arms_RightHandPosition;
    private readonly InputAction m_Arms_LeftHandRaised;
    private readonly InputAction m_Arms_RightHandRaised;
    public struct ArmsActions
    {
        private @CapturyInputActions m_Wrapper;
        public ArmsActions(@CapturyInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftHandPosition => m_Wrapper.m_Arms_LeftHandPosition;
        public InputAction @RightHandPosition => m_Wrapper.m_Arms_RightHandPosition;
        public InputAction @LeftHandRaised => m_Wrapper.m_Arms_LeftHandRaised;
        public InputAction @RightHandRaised => m_Wrapper.m_Arms_RightHandRaised;
        public InputActionMap Get() { return m_Wrapper.m_Arms; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ArmsActions set) { return set.Get(); }
        public void AddCallbacks(IArmsActions instance)
        {
            if (instance == null || m_Wrapper.m_ArmsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ArmsActionsCallbackInterfaces.Add(instance);
            @LeftHandPosition.started += instance.OnLeftHandPosition;
            @LeftHandPosition.performed += instance.OnLeftHandPosition;
            @LeftHandPosition.canceled += instance.OnLeftHandPosition;
            @RightHandPosition.started += instance.OnRightHandPosition;
            @RightHandPosition.performed += instance.OnRightHandPosition;
            @RightHandPosition.canceled += instance.OnRightHandPosition;
            @LeftHandRaised.started += instance.OnLeftHandRaised;
            @LeftHandRaised.performed += instance.OnLeftHandRaised;
            @LeftHandRaised.canceled += instance.OnLeftHandRaised;
            @RightHandRaised.started += instance.OnRightHandRaised;
            @RightHandRaised.performed += instance.OnRightHandRaised;
            @RightHandRaised.canceled += instance.OnRightHandRaised;
        }

        private void UnregisterCallbacks(IArmsActions instance)
        {
            @LeftHandPosition.started -= instance.OnLeftHandPosition;
            @LeftHandPosition.performed -= instance.OnLeftHandPosition;
            @LeftHandPosition.canceled -= instance.OnLeftHandPosition;
            @RightHandPosition.started -= instance.OnRightHandPosition;
            @RightHandPosition.performed -= instance.OnRightHandPosition;
            @RightHandPosition.canceled -= instance.OnRightHandPosition;
            @LeftHandRaised.started -= instance.OnLeftHandRaised;
            @LeftHandRaised.performed -= instance.OnLeftHandRaised;
            @LeftHandRaised.canceled -= instance.OnLeftHandRaised;
            @RightHandRaised.started -= instance.OnRightHandRaised;
            @RightHandRaised.performed -= instance.OnRightHandRaised;
            @RightHandRaised.canceled -= instance.OnRightHandRaised;
        }

        public void RemoveCallbacks(IArmsActions instance)
        {
            if (m_Wrapper.m_ArmsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IArmsActions instance)
        {
            foreach (var item in m_Wrapper.m_ArmsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ArmsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ArmsActions @Arms => new ArmsActions(this);

    // Head
    private readonly InputActionMap m_Head;
    private List<IHeadActions> m_HeadActionsCallbackInterfaces = new List<IHeadActions>();
    private readonly InputAction m_Head_HeadPosition;
    private readonly InputAction m_Head_HeadRotation;
    private readonly InputAction m_Head_HeadNodding;
    private readonly InputAction m_Head_HeadShaking;
    public struct HeadActions
    {
        private @CapturyInputActions m_Wrapper;
        public HeadActions(@CapturyInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @HeadPosition => m_Wrapper.m_Head_HeadPosition;
        public InputAction @HeadRotation => m_Wrapper.m_Head_HeadRotation;
        public InputAction @HeadNodding => m_Wrapper.m_Head_HeadNodding;
        public InputAction @HeadShaking => m_Wrapper.m_Head_HeadShaking;
        public InputActionMap Get() { return m_Wrapper.m_Head; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HeadActions set) { return set.Get(); }
        public void AddCallbacks(IHeadActions instance)
        {
            if (instance == null || m_Wrapper.m_HeadActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HeadActionsCallbackInterfaces.Add(instance);
            @HeadPosition.started += instance.OnHeadPosition;
            @HeadPosition.performed += instance.OnHeadPosition;
            @HeadPosition.canceled += instance.OnHeadPosition;
            @HeadRotation.started += instance.OnHeadRotation;
            @HeadRotation.performed += instance.OnHeadRotation;
            @HeadRotation.canceled += instance.OnHeadRotation;
            @HeadNodding.started += instance.OnHeadNodding;
            @HeadNodding.performed += instance.OnHeadNodding;
            @HeadNodding.canceled += instance.OnHeadNodding;
            @HeadShaking.started += instance.OnHeadShaking;
            @HeadShaking.performed += instance.OnHeadShaking;
            @HeadShaking.canceled += instance.OnHeadShaking;
        }

        private void UnregisterCallbacks(IHeadActions instance)
        {
            @HeadPosition.started -= instance.OnHeadPosition;
            @HeadPosition.performed -= instance.OnHeadPosition;
            @HeadPosition.canceled -= instance.OnHeadPosition;
            @HeadRotation.started -= instance.OnHeadRotation;
            @HeadRotation.performed -= instance.OnHeadRotation;
            @HeadRotation.canceled -= instance.OnHeadRotation;
            @HeadNodding.started -= instance.OnHeadNodding;
            @HeadNodding.performed -= instance.OnHeadNodding;
            @HeadNodding.canceled -= instance.OnHeadNodding;
            @HeadShaking.started -= instance.OnHeadShaking;
            @HeadShaking.performed -= instance.OnHeadShaking;
            @HeadShaking.canceled -= instance.OnHeadShaking;
        }

        public void RemoveCallbacks(IHeadActions instance)
        {
            if (m_Wrapper.m_HeadActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHeadActions instance)
        {
            foreach (var item in m_Wrapper.m_HeadActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HeadActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HeadActions @Head => new HeadActions(this);
    public interface ITorsoActions
    {
        void OnIsBentOver(InputAction.CallbackContext context);
        void OnIsUpright(InputAction.CallbackContext context);
        void OnWeightShiftLeft(InputAction.CallbackContext context);
        void OnWeightShiftRight(InputAction.CallbackContext context);
        void OnWeightShiftX(InputAction.CallbackContext context);
        void OnPelvisPosition(InputAction.CallbackContext context);
    }
    public interface IFootActions
    {
        void OnFootRaised(InputAction.CallbackContext context);
        void OnFootLowered(InputAction.CallbackContext context);
        void OnLeftFootPosition(InputAction.CallbackContext context);
        void OnRightFootPosition(InputAction.CallbackContext context);
        void OnLeftHipAbducted(InputAction.CallbackContext context);
        void OnRightHipAbducted(InputAction.CallbackContext context);
        void OnIsWalking(InputAction.CallbackContext context);
        void OnWalkStarted(InputAction.CallbackContext context);
        void OnWalkStopped(InputAction.CallbackContext context);
        void OnWalkSpeed(InputAction.CallbackContext context);
        void OnCadence(InputAction.CallbackContext context);
        void OnLeftStep(InputAction.CallbackContext context);
        void OnRightStep(InputAction.CallbackContext context);
        void OnLeftStepTime(InputAction.CallbackContext context);
        void OnRightStepTime(InputAction.CallbackContext context);
        void OnStepTimeAsymmetry(InputAction.CallbackContext context);
        void OnGaitConsistency(InputAction.CallbackContext context);
    }
    public interface IArmsActions
    {
        void OnLeftHandPosition(InputAction.CallbackContext context);
        void OnRightHandPosition(InputAction.CallbackContext context);
        void OnLeftHandRaised(InputAction.CallbackContext context);
        void OnRightHandRaised(InputAction.CallbackContext context);
    }
    public interface IHeadActions
    {
        void OnHeadPosition(InputAction.CallbackContext context);
        void OnHeadRotation(InputAction.CallbackContext context);
        void OnHeadNodding(InputAction.CallbackContext context);
        void OnHeadShaking(InputAction.CallbackContext context);
    }
}
